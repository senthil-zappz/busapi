version: 2.1
orbs:
  heroku: circleci/heroku@1.2.6
  node: circleci/node@4.7.0
  snyk: snyk/snyk@0.0.10
jobs:
  build-and-test:
    docker:
      - image: cimg/openjdk:19.0.1
      - image: cimg/postgres:14.0
    environment:
      POSTGRES_USER: postgres
  steps:
    - checkout
    - run:
        name: Build
        command: mvn -B -DskipTests clean package
    - run:
        name: Test
        command: mvn test

- setup_remote_docker:
    docker_layer_caching: false
- run:
    name: Build and Scan Docker image
    command: |
          echo 'export PATH=~$PATH:~/.local/bin' >> $BASH_ENV
          echo 'export TAG=${CIRCLE_SHA1}' >> $BASH_ENV
          echo 'export IMAGE_NAME=my-app' >> $BASH_ENV && source $BASH_ENV
          docker build -t $DOCKER_LOGIN/$IMAGE_NAME -t $DOCKER_LOGIN/$IMAGE_NAME:$TAG .
- snyk/scan:
    fail-on-issues: true
    monitor-on-build: true
    docker-image-name: $DOCKER_LOGIN/$IMAGE_NAME:$TAG
    target-file: "Dockerfile"
    project: ${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}-app
    organization: ${SNYK_CICD_ORGANIZATION}
- run:
    name: Push Docker image to Docker Hub
    command: |
        echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
        docker push $DOCKER_LOGIN/$IMAGE_NAME
- heroku/deploy-via-git:
    force: true
    requires:
      - build-and-test

workflows:
  build-and-test:
    jobs:
      - build-and-test



This configuration includes the following steps:
Building and testing the Spring Boot application.
Setting up a PostgreSQL database.
Building a Docker image of the application.
Scanning the Docker image with Snyk.
Pushing the Docker image to Docker Hub.
Deploying the application to Heroku.
Please note that this is a basic example and you might need to adjust it according to your specific needs. For example, you might need to add additional steps to set up the database schema, or to install any necessary dependencies for your application.
For more detailed information, you can refer to the following documents:
Database Configuration Examples
Testing a Spring Boot API with SpringBootTest and CircleCI
Adding application and image scans to your CI/CD pipeline
Automating the deployment of LoopBack applications to Heroku






version: 2.0
orbs:
  docker: circleci/docker@2.1.4
  heroku: circleci/heroku@2.0.0

jobs:
  build:
    docker:
      - image: cimg/openjdk:17.0
      - image: circleci/postgres
        restart: always
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD:

    working_directory: ~/setup
    steps:
      - checkout
      - run: rm busservices.sql || true
      - run: rm busservices-v1.sql || true
      - run: curl https://www.phpix.com/myNextBus/busservices-v1.sql --output busservices-v1.sql
      - run: sudo apt-get update && sudo apt-get install postgresql-client
      - run: psql -h 127.0.0.1 -U postgres  -c "create database busservices;"
      - run: psql -h 127.0.0.1 -U postgres busservices < ~/setup/busservices-v1.sql
      - run: mvn -B -DskipTests clean package

  test:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - run: mvn test